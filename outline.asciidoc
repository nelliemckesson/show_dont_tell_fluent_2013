== Outline

.CHRIS
* Intro to the Web Audio API
* About the book with Boris
* A little Atlas Reader demo?? Or do this later?

NELLIE (8 min ugh)

It seems pretty obvious to publish something like this on the Web, right?

Best way to really show the awesomeness of this technology.

But the truth is, publishers have it tough.

// SLIDE: All the formats, part 1

Imagine if, instead of just building responsive sites for mobile, tablets, and desktop, you had to _also_ build content that responds to trees, dead browsers from 10 years ago, and secret government projects that you aren't even allowed to see the code for?

// SLIDE: All the formats, part 2

This is the publishing landscape of today.

Adding Web publishing into the mix is a total game changer.

You wouldn't think this

I mean, the ebook files that you read on an iPad or Kindle are essentially HTML and CSS, so we basically already convert every book into a little self-contained website

// SLIDE: print book in iPad

but most people have been thinking about ebooks as the same as print

This means they use the same static content

// SLIDE: Sad little HTML on crutches

And a lot of the devices that read ebook files have generally only built the bare minimum of support for HTML and CSS

It's like the browser landscape of 10 years ago, where every browser supported different features and you had to jump through hoops to get your sites to work everywhere, and ended up compromising on functionality

But as Chris showed us, sometimes it's so much more powerful to see something in action

And we need full flexibility of Web to show these things

// SLIDE: Long form projects, + links

Enhanced, longform web publishing isn't brand new

We've been seeing more and more cool projects, like the NY Times Snow Fall article.

And in fact, O'Reilly has published books to the Web before

But they've all been custom projects, special snowflakes that existed outside of our normal pubishing workflow

That's silly.

The Web is where people read, and publishing a book to the web shouldn't be a strange, out-of-process thing.

But most publishers don't have the budgets to build custom, one-off products for every format

Most publishers already publish to a few different formats: EPUB, MOBI, PDF and Print

But we're not getting 4x the sales

In fact, we're pulling in less money than back in the print-only days, because we're selling the same number of books, but charging less for 75% of what we sell (ie, the ebooks)

So we need our content to be responsive

We need to be able to publish the same source file to every format that customers want to read

And we want that content to be the absolute best, prettiest, and most effective learning material for each of those formats

But we couldn't really find an existing tool that did all this stuff, so we built one. 

We built what is essentially a CMS without the CMS

A platform without all the CMS-y overhead that can publish long-form content responsively

Anyone who works with Content Management Systems knows that you need to make a system that can scale, and that can accomodate 90% of potential scenarios

So in the system we built, authors write, pick what format to publish to, and their content gets styled accordingly

For the Web, you get embedded video and audio and cool interactive stuff

For print, you get links and placeholder images

It's push-button responsive formatting, and I'm not exaggerating when I say it's push-button

// SLIDE: Book and site

These two things came from the same files

We built a lot of plumbing in our toolchain, use markup for our source authoring format, and custom XSL conversions and CSS for each format, so that authors and our production teams can make beautiful books with ease

Because the goal is to give people the best learning experience for however they choose to read

Print is still great: UX refined over hundreds of years

But sometimes it's just better to see the technology in action, rather than read a description of it. 

MORE CHRIS?? ATLAS READER DEMO HERE?

And once you embrace the web for both reading and writing, you're really opening the door for a much more collaborative and interactive experience.

There are lots of tools out there that are perfect for this stuff, so you don't have to reinvent the wheel.

// SLIDE: Little video playing in background: chris forking, editing, sending pull request, me accepting, rebuilding, thumbs up!

We can put book source files in GitHub. And we actually built our authoring platform on Git for this very purpose, so you're using the same tools to write a book that you use to write code.

So as Chris and I are writing our book together, he can fork my repo, make changes, send me pull requests to update

I can pull in his changes, rebuild with the click of a button, and presto, there it is.

// SLIDE: Comment in reader vs. writer

Another thing we added to the system we built was to integrate the HTML commenting system with the authoring GUI, so authors can incorporate comments as they write, without jumping back and forth

And then in addition to regular old audio and video embeds, we use JSBin and iframes so you can embed just about anything you want

It comes down to scalability - you need a system that can work for almost any author, and build to almost any format.

As publishing and the Web continue to converge, these kinds of problems and workflows are going to gain more and more attention. 

You have to think about what makes a book a book, what's the best way present this information, what's useful for the content, how are people going to be looking at the content and what kinds of navigation and extras make sense for the platform?

Is an animated page turn adding anything at all to the digital experience? Probably not--it's actually probably just adding distraction--but a sticky table of contents probably does add something. And so does an embedded audio example or data visualization.

And do pages make sense on a screen, or are you better off with a scroll, or maybe a mix of both?

We took a stab at tackling some of these questions, and the system that we built is called Atlas, it's kind of still in Beta but we want you guys to play around with it. We want everyone to start seriously thinking about the best ways to share information on the Web, and finding new ways to spread the knowledge of innovators.