== Outline

.CHRIS
* Intro to the Web Audio API
* About the book with Boris
* A little Atlas Reader demo?? Or do this later?

.NELLIE (6-7ish min)
It seems pretty obvious to publish something like this on the Web, right?

Best way to really show the awesomeness of this technology.

But the truth is, publishers have it tough.

Imagine if, instead of just building responsive sites for mobile, tablets, and desktop, you had to _also_ build content that responds to trees, dead browsers from 10 years ago, and secret government projects that you aren't even allowed to see the code for?

This is the publishing landscape of today.

Adding Web publishing into the mix is a total game changer.

You wouldn't think this

I mean, EPUB is essentially HTML and CSS, so we basically already convert every book into a little self-contained website

but most people have been thinking about ebooks as the same as print

This means they use the same static content

And a lot of the devices that read EPUB files have generally only built the bare minimum of support for HTML and CSS

It's like the browser landscape of 10 years ago, where every browser supported different features and you had to jump through hoops to get your sites to work everywhere, and ended up compromising on functionality

But as Chris showed us, sometimes it's so much more powerful to see something in action

And we need full flexibility of Web to show these things

Enhanced, longform web publishing isn't brand new

We've been seeing more and more cool projects, like the NY Times Snow Fall article, and TKTK

And in fact, O'Reilly has published books to the Web before

But they've all been custom projects, special snowflakes that existed outside of our normal pubishing workflow

That's silly.

The Web is where people read.

Publishing and Web dev are the same - distributing information

But we don't have the budget to build custom, one-off products for every format

Most publishers already publish to a few different formats: EPUB, MOBI, PDF and Print

But we're not getting 4x the sales

In fact, we're pulling in less money than back in the print-only days, because we're selling the same number of books, but charging less for 75% of what we sell (ie, the ebooks)

So we need our content to be responsive

We need to be able to publish the same source file to every format that customers want to read

And we want that content to be the absolute best, prettiest, and most effective learning material for each of those formats

Which means we need a publishing system that is flexible enough to handle just about any kind of interactive example an author can think of, and can target it's output for particular book formats

So we built it. 

We built what is essentially a CMS that can publish responsively

Authors write, pick what format to publish to, and their content gets styled accordingly

For the Web, you get embedded video and audio and cool interactive stuff

For print, you get links and placeholder images

It's push-button responsive formatting, and I'm not exaggerating when I say it's push-button

We built a lot of plumbing in our toolchain, use markup for our source authoring format, and custom XSL conversions and CSS for each format, so that authors and our production teams can make beautiful books with ease

Because the goal is to give people the best learning experience for however they choose to read

Print is still great: UX refined over hundreds of years

But sometimes it's just better to see the technology in action, rather than read a description of it

MORE CHRIS?? ATLAS READER DEMO HERE?

By moving both reading and writing to the Web, we can do some really cool stuff

First off, we can put the source files in GitHub.

So as Chris and I are writing our book together, he can fork my repo, make changes, send me pull requests to update

I can pull in his changes, rebuild with the click of a button, and presto, there it is.

We also built our HTML commenting system to integrate with the authoring GUI, so authors can incorporate comments as they write, without jumping back and forth
// SLIDES: COMMENT IN READER VS. WRITER

And in addition to audio and video embeds, we use JSBin and iframes so you can embed just about anything you want

It's about scalability - a system that can work for almost any author, and build to almost any format.

It's called Atlas, it's kind of still in Beta but we want you guys to play around with it, because we're really excited about finding new ways to spread the knowledge of innovators.